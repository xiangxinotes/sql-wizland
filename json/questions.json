{
    "1" : [
        {
        "question_id": 1,
        "question_text_before_options": "SELECT customer_id, customer_name FROM customers WHERE customer_name ",
        "options": ["LIKE", "="],
        "question_text_after_options": " '%John%';",
        "question_comment": "本题解题线索是挖空处后面的 '%John%'。在 SQL 中，'%John%' 这样的表达式通常用于在进行文本数据的查询操作时，实现模糊匹配的功能，因此这里应该使用用于模糊查询的 LIKE。= 是用于精确匹配的，所以用 = 不会返回我们想要的结果，因为不会有顾客名称恰好等于 %John% 这样带有通配符的字符串。",
        "knowledge_comment":"= 在 SQL 中用于精确匹配。而 LIKE 用于模糊查询，一般会搭配正则表示式使用。如果你没听说过正则表示式，正则表达式的应用场景很多，一定要去学习。",
        "correct_answer": "LIKE",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 2,
        "question_text_before_options": "查出 products 表中价格在 50-100 区间的产品: SELECT product_id, product_name, price FROM products WHERE price ",
        "options": ["IN (50, 100)", "BETWEEN 50 AND 100"],
        "question_text_after_options": ";",
        "question_comment": "题干明确指出需要查询的是 50-100 区间，也就是说：50, 51, 52, ... ,99, 100 都需要被查询并返回。IN 只能用于判断一个值是否在指定的集合中，所以用 IN 只会返回价格恰好是 50 或者 100 的产品。",
        "knowledge_comment":"IN 和 BETWEEN AND 都用于在一定条件下筛选数据，使用时一定要注意区别。区别在于：IN 用于判断一个值是否在指定的集合中，BETWEEN AND 用于判断一个值是否在一个连续的区间内。",
        "correct_answer": "BETWEEN 50 AND 100",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 3,
        "question_text_before_options": "SELECT product_id, ",
        "options": ["SUM", "AVG"],
        "question_text_after_options": " (quantity) as average_quantity FROM sales GROUP BY product_id;",
        "question_comment": "本题解题线索是 as average_quantity，即平均数量，对查询变量的重命名暗示了此题想查询每种产品的平均销售数量。SUM 是求和函数，AVG 是求平均值函数，答案一目了然了。",
        "knowledge_comment": "SUM 和 AVG 都是对数值列进行计算的函数，SUM 是 Summation (求和) 的简写，用于求和，AVG 是 Average (平均) 的简写，用于求平均值。还有其他的函数，比如计算的函数，比如 MAX 和 MIN，函数名都是英文单词简写，可以遇到一个积累一个。",
        "correct_answer": "AVG",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 4,
        "question_text_before_options": "查出所有员工及其所在部门的信息: SELECT employees.employee_id, employees.department_id, departments.department_name FROM employees ",
        "options": ["JOIN", "LEFT JOIN"],
        "question_text_after_options": " departments ON employees.department_id = departments.department_id;",
        "question_comment": "题干明确指出需要查询的是所有员工的信息，也就是说只要一个员工信息存在于 employees 表中，就应该返回（即使此员工还没有分配department），所以应该使用 LEFT JOIN 以 employees 表为基准返回结果。",
        "knowledge_comment": "JOIN，也就是 INNER JOIN，是内连接，它只会返回两个表的交集（也就是满足连接条件的匹配记录）； LEFT JOIN，也就是 LEFT OUTTER JOIN 的简写，是左外连接，它会返回左边表中的所有数据（即使和右边表没有匹配记录也会被返回）。",
        "correct_answer": "LEFT JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 5,
        "question_text_before_options": "SELECT class_id, ",
        "options": ["COUNT(*)", "COUNT(name)"],
        "question_text_after_options": " as number_of_students FROM students GROUP BY class_id;",
        "question_comment": "本题解题线索是 as number_of_students，即学生数量，对查询变量的重命名暗示了此题想查询每个班的学生数量。COUNT 是计数函数，COUNT(*) 统计所有行的个数，而 COUNT(name) 只统计 name 列非空值的行的个数，因此如果 name 列存在空值，就会出现统计数量比真实情况少的情况。",
        "knowledge_comment": "COUNT(*) 和 COUNT(列名) 是有区别的。COUNT (*) 是用于统计包括空值在内的所有行的；而 COUNT (列名) 不统计空值行，所以如果 列名 这一列存在空值，那么统计的结果将会少于真实数据。",
        "correct_answer": "COUNT(*)",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 6,
        "question_text_before_options": "查出 A、B 两班所有学生的考试成绩: SELECT student_name, subject, score FROM classa",
        "options": ["UNION", "UNION ALL"],
        "question_text_after_options": " SELECT student_name, subject, score FROM classb;",
        "question_comment": "题干明确指出需要查询的是 A、B 两班所有学生的考试成绩，而且可以看到查询的是学生姓名、科目、成绩三项，那就必须使用 UNION ALL 来确保重名学生的成绩都能被返回到结果中。",
        "knowledge_comment": "UNION，合并结果集并去除重复行； UNION ALL，合并结果集并保留所有行，包括重复行。",
        "correct_answer": "UNION ALL",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 7,
        "question_text_before_options": "SELECT department_id, last_name, first_name, salary FROM employees",
        "options": ["ORDER BY", "GROUP BY"],
        "question_text_after_options": " salary DESC, department_id;",
        "question_comment": "本题解题线索是 salary DESC 中的 DESC，即降序，涉及到排序，那么必然选择ORDER BY。",
        "knowledge_comment": "ORDER BY，对查询返回的结果集按照指定的列进行排序，可以按照某一列排序或者同时按照多列进行排序，排序的顺序可以是升序 (ASC 或留空) 或者降序 (DESC)； GROUP BY，将条目分组，以便对每个组执行聚合函数（比如 COUNT(), MAX(), MIN(), SUM(), AVG() 等）。",
        "correct_answer": "ORDER BY",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 8,
        "question_text_before_options": "查出每种产品的平均价格(四舍五入保留两位小数): SELECT product_id",
        "options": ["ROUND", "TRUNCATE"],
        "question_text_after_options": " (AVG(price), 2) FROM products GROUP BY product_id;",
        "question_comment": "题干明确指出需要查询的是每种产品的平均价格，需要四舍五入，并且保留两位小数，因此选择ROUND，因为ROUND会进行四舍五入。",
        "knowledge_comment": "ROUND，按指定位数对数值进行四舍五入，ROUND(number, 2) 即按照2位数对 number 进行四舍五入，若 number = 2.339，则 ROUND(number, 2) = 2.34； TRUNCATE，按照位数对数值进行截取，TRUNCATE(number, 2)即按照2位数对 number 进行截取，若 number = 2.339，则 TRUNCATE(number, 2) = 2.33",
        "correct_answer": "ROUND",
        "applicable_databases": ["MySQL"]
    },
    {
        "question_id": 9,
        "question_text_before_options": "查出每种产品的平均价格(四舍五入保留两位小数): SELECT product_id",
        "options": ["ROUND", "TRUNC"],
        "question_text_after_options": " (AVG(price), 2) FROM products GROUP BY product_id;",
        "question_comment": "题干明确指出需要查询的是每种产品的平均价格，需要四舍五入，并且保留两位小数，因此选择ROUND，因为ROUND会进行四舍五入。",
        "knowledge_comment": "ROUND，按指定位数对数值进行四舍五入，ROUND(number, 2) 即按照2位数对 number 进行四舍五入，若 number = 2.339，则 ROUND(number, 2) = 2.34； TRUNC，按照位数对数值进行截取，TRUNC(number, 2)即按照2位数对 number 进行截取，若 number = 2.339，则 TRUNC(number, 2) = 2.33",
        "correct_answer": "ROUND",
        "applicable_databases": ["Oracle", "PostgreSQL"]
    },
    {
        "question_id": 10,
        "question_text_before_options": "查出每种产品的平均价格(四舍五入保留两位小数): SELECT product_id",
        "options": ["ROUND(AVG(price), 2)", "ROUND(AVG(price), 2, 1)"],
        "question_text_after_options": " FROM products GROUP BY product_id;",
        "question_comment": "题干明确指出需要查询的是每种产品的平均价格，需要四舍五入，并且保留两位小数，因此选择ROUND(AVG(price), 2)，因为在没有第三个参数的情况下，ROUND会进行四舍五入。",
        "knowledge_comment": "ROUND(n,d)，按指定 d 位数对数值 n 进行四舍五入，ROUND(number, 2) 即按照2位数对 number 进行四舍五入，若 number = 2.339，则 ROUND(number, 2) = 2.34； ROUND(n,d,f)，根据 f 大小按指定 d 位数对数值 n 进行截取（当 f 为0时，即默认值，需要对数值进行四舍五入；当 f 大于0时，不进行四舍五入，直接截取），ROUND(number, 2, 1)即按照2位数直接对 number 进行截取，若 number = 2.339，则 ROUND(number, 2, 1) = 2.33",
        "correct_answer": "ROUND(AVG(price), 2)",
        "applicable_databases": ["SQL Server"]
    }],
    "2" : [
        {
        "question_id": 1,
        "question_text_before_options": "查询员工信息和其部门信息：SELECT * FROM employees ",
        "options": ["JOIN", "UNION"],
        "question_text_after_options": " departments ON employees.department_id = departments.department_id;",
        "question_comment": "UNION 用于合并两个或多个 SELECT 语句的结果集，而且要求列数、对应列的数据类型等要一致，所以 UNION 的前后必须都包含 SELECT 语句，这道题 UNION 后面的部分没有 SELECT 语句，所以应该选择JOIN。",
        "knowledge_comment": "JOIN 用于表与表之间基于关联条件的连接操作，能获取到符合关联逻辑的综合数据；UNION 侧重合并多个查询结果集，二者功能不同，使用场景有明显区别，要准确掌握。",
        "correct_answer": "JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 2,
        "question_text_before_options": "SELECT * FROM employees INNER JOIN departments ",
        "options": ["ON", "WHERE"],
        "question_text_after_options": " employees.department_id = departments.department_id",
        "question_comment": "在标准 SQL 中，当使用 INNER JOIN 时，如果没有 ON 子句，语法是错误的。因为 INNER JOIN 需要基于某些列的关联条件来确定如何连接两个表，而这个关联条件是通过 ON 子句来指定的，所以这里应该选择 ON。",
        "knowledge_comment": "你可能会在测试中发现这里选择 ON 和 WHERE 会产生同样的结果，这是因为你的 MySQL 版本较旧或者有特定的数据库配置导致的，但使用 INNER JOIN 时没有 ON 子句是不符合标准规范的行为，请不要这样编写代码。",
        "correct_answer": "ON",
        "applicable_databases": ["MySQL"]
    },
    {
        "question_id": 3,
        "question_text_before_options": "SELECT * FROM employees INNER JOIN departments ",
        "options": ["ON", "WHERE"],
        "question_text_after_options": " employees.department_id = departments.department_id",
        "question_comment": "在标准 SQL 中，当使用 INNER JOIN 时，如果没有 ON 子句，语法是错误的。因为 INNER JOIN 需要基于某些列的关联条件来确定如何连接两个表，而这个关联条件是通过 ON 子句来指定的，所以这里应该选择 ON。",
        "knowledge_comment": "和 MySQL 不同，使用 INNER JOIN 但没有 ON 子句，一定会产生语法错误，如果你有其他需要过滤的条件，可以用 AND 加到 ON 子句中，或者用 WHERE 写到 ON 子句后。",
        "correct_answer": "ON",
        "applicable_databases": ["SQL Server", "Oracle"]
    },
    {
        "question_id": 4,
        "question_text_before_options": "SELECT stores.store_name, products.product_name FROM stores <strong>JOIN</strong> products ON stores.store_id = products.store_id 中的 JOIN 是",
        "options": ["NATURAL JOIN", "OUTER JOIN", "INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "CROSS JOIN"],
        "question_text_after_options": "的简写。",
        "question_comment": "在 SQL 中，JOIN（不带修饰词时）默认是 INNER JOIN。这意味着在大多数情况下，当你想要进行内连接操作时，使用 JOIN 和 INNER JOIN 是等效的。",
        "knowledge_comment": "虽然在 SQL 中，INNER JOIN 中的 INNER 可以省略，但为了代码的清晰性和可读性，明确使用 INNER JOIN 可能是更好的选择。",
        "correct_answer": "INNER JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 5,
        "question_text_before_options": "在语法格式上符合使用自然连接的要求（假设各表有合适的同名关联字段）的是：SELECT * FROM products ",
        "options": ["NATURAL JOIN", "JOIN"],
        "question_text_after_options": " categories;",
        "question_comment": "NATURAL JOIN是基于两张表中同名字段自动进行连接的一种连接方式，语法上直接使用NATURAL JOIN关键字跟要连接的表名就行。而JOIN后面通常需要跟具体的连接条件（如ON子句等），题目要求使用自然连接，所以选项中用NATURAL JOIN这种连续使用自然连接关键字去连接多个表的格式才符合要求，JOIN的那种写法不符合自然连接语法格式。",
        "knowledge_comment": "NATURAL JOIN语法相对简洁，依靠同名字段自动关联，但使用时要确保表中同名字段确实是用于关联的合理字段，同时要区分它和普通JOIN在语法及使用方式上的不同。",
        "correct_answer": "NATURAL JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 6,
        "question_text_before_options": "查询员工工资记录，要求所有员工的工资记录都要显示（即使有些员工没有对应的工资记录情况也显示）：SELECT * FROM salaries ",
        "options": ["RIGHT JOIN", "LEFT JOIN"],
        "question_text_after_options": " employees ON salaries.employee_id = employees.employee_id;",
        "question_comment": "RIGHT JOIN是以右边的表（这里是employees表）为主，会返回右边表的所有记录以及与左边表匹配的记录，符合题目要求，所以要用RIGHT JOIN。",
        "knowledge_comment": "RIGHT JOIN，RIGHT OUTER JOIN 的简写，与LEFT JOIN刚好相反，RIGHT JOIN侧重于保留右表全部记录并关联左表匹配记录，LEFT JOIN反之，保留左表全部记录并关联右表匹配记录，要根据实际需求中对表记录保留及关联的侧重来选用合适的连接类型。",
        "correct_answer": "RIGHT JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 7,
        "question_text_before_options": "获取所有学生及对应的课程信息（即使没选课的学生也显示）：SELECT students.student_name, courses.course_name FROM students ",
        "options": ["LEFT JOIN", "INNER JOIN"],
        "question_text_after_options": " student_courses ON students.student_id = student_courses.student_id LEFT JOIN courses ON student_courses.course_id = courses.course_id;",
        "question_comment": "INNER JOIN只会返回两个表中满足连接条件的交集数据，也就是只有选了课的学生信息才会被显示出来。而LEFT JOIN是以左边的表（这里先以students表为主），会返回左边表的所有记录以及与右边表匹配的记录，所以即使没选课的学生也能显示出来，为了符合题目要求显示所有学生的情况，要用LEFT JOIN。",
        "knowledge_comment": "INNER JOIN和LEFT JOIN是多表连接中常用的不同连接方式，INNER JOIN取交集，LEFT JOIN 是 LEFT OUTER JOIn的简写，侧重于保留左表全部记录，要依据具体需求选择合适的连接类型来获取期望的数据。",
        "correct_answer": "LEFT JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 8,
        "question_text_before_options": "SELECT * FROM employees INNER JOIN departments ",
        "options": ["ON", "USING"],
        "question_text_after_options": " (department_id);",
        "question_comment": "本题解题线索是挖空处后面的 (department_id)，因为 ON 必须明确写出两个表的列名来定义连接条件，所以这里选择 USING。如果要使用 ON 完成本题，那么挖空处后面应该写成 employees.department_id = departments.department_id",
        "knowledge_comment": "在连接两个表时，如果连接列名相同，那么用 ON 和 USING 都是可以的，相比较而言，USING 的语法更简洁，而 ON 则需要明确写出两个表的列名来定义连接条件。",
        "correct_answer": "USING",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 9,
        "question_text_before_options": "SELECT basket_name, fruit_name FROM baskets ",
        "options": ["INNER JOIN", "FULL OUTER JOIN"],
        "question_text_after_options": " fruits ON baskets.basket_id = fruits.basket_id WHERE baskets.basket_id IS NOT NULL AND fruits.basket_id IS NULL;",
        "question_comment": "本题解题线索是 WHERE 后面的条件，即没有放到篮子中的水果。因为 INNER JOIN 只会返回放到篮子中的水果，所以使用此过滤逻辑会返回空，肯定不符合实际情况。",
        "knowledge_comment": "FULL OUTER JOIN 可以简写为 FULL JOIN，它返回左表和右表中的所有行。如果左表中的行在右表中没有匹配的行，右表对应的列填充为NULL；反之，如果右表中的行在左表中没有匹配的行，左表对应的列填充为NULL。如果你使用的数据库不支持 FULL OUTER JOIN，你可以用 LEFT OUTER JOIN UNION RIGHT OUTER JOIN 代替。",
        "correct_answer": "FULL OUTER JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 10,
        "question_text_before_options": "查询所有可能的商品类别和颜色组合：SELECT pc.category_name, c.color_name FROM product_categories pc ",
        "options": ["CROSS JOIN", "FULL JOIN"],
        "question_text_after_options": " colors c;",
        "question_comment": "本题解题线索是不包含 ON 子句，在标准 SQL 语法中，FULL JOIN（全外连接）通常需要跟ON子句。ON子句用于指定两个表之间的连接条件，也就是告诉数据库如何根据两个表中的列来匹配行。在某些情况下，如果没有ON子句，数据库系统可能会尝试根据表中的列名自动匹配（如果存在同名且数据类型兼容的列），或者按照某种默认规则进行连接，但这种行为是非标准的，并且不同数据库系统的处理方式可能不同。某些数据库的旧版本或者特定配置下，可能会将没有ON子句的FULL JOIN当作CROSS JOIN（笛卡尔积）来处理，请不要这样编写代码。",
        "knowledge_comment": "使用 CROSS JOIN 会生成两个表之间的笛卡尔积。当需要为新系统或者功能创建测试数据时，CROSS JOIN往往会派上用场，但在使用CROSS JOIN时要特别小心，因为它会产生笛卡尔积，导致结果集的数据量可能会急剧增长，导致性能问题，如占用大量的内存和磁盘空间，甚至使数据库服务器崩溃。",
        "correct_answer": "CROSS JOIN",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    }],
    "3" : [
        {
            "question_id": 1,
            "question_text_before_options": "计算3天后的日期：SELECT ",
            "options": ["DATE_ADD", "DATE_SUB" ,"DATE_DIFF","PLUS_DATE"],
            "question_text_after_options": "(launch_date, INTERVAL 3 DAY) AS expire_date from products;",
            "question_comment": "本题可使用排除法。DATE_DIFF 的写法不对，正确的函数名应该是DATEDIFF，因此可以排除；PLUS_DATE 并非任何主流数据库里的内置函数名，也可以排除。DATE_ADD，DATE_SUB 都是 MySQL中内置的函数名，但作用不一样，通过它们的名字也可以看出，一个是ADD（加法）；一个是SUB（减法），因为是计算3天后的日期，因此应该是用加法，在现在的日期上加上3天，所以选择 DATE_ADD。",
            "knowledge_comment": "在 MySQL 中，DATE_ADD() 函数用于对日期进行加法操作。它接收一个日期值和一个时间间隔作为参数，返回一个新的日期。",
            "correct_answer": "DATE_ADD",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 1,
            "question_text_before_options": "计算3天后的日期：SELECT ",
            "options": ["DATE_ADD", "DATEADD", "DATESUB", "DATEDIFF"],
            "question_text_after_options": "(DAY, 3, launch_date) expire_date from products;",
            "question_comment": "DATE_ADD 是 MySQL 的内置函数名，用于对日期进行加法操作。DATE_ADD 函数的语法是：DATE_ADD(date, INTERVAL value unit)；DATEADD() 函数的参数顺序和 DATE_ADD() 有所不同，它要求先指定时间间隔类型，接着是间隔值，最后是日期；DATESUB 并非任何主流数据库里的内置函数名，可以排除；DATEDIFF 函数用来计算两个日期之前的间隔，语法是：DATEDIFF(datepart, startdate, enddate)",
            "knowledge_comment": "DATEADD 的语法是：DATEADD(datepart, number, date)，需要注意的是因为 SQL Server 没有 DATASUB 函数，所以如果想要计算几天前的日期，仍需使用 DATEADD，不同的是，number 参数填写负值。如果需要计算3天前的日期：(DAY, -3, launch_date)",
            "correct_answer": "DATEADD",
            "applicable_databases": ["SQL Server"]
        },
        {
            "question_id": 1,
            "question_text_before_options": "计算3天后的日期：SELECT ",
            "options": ["DATEADD(DAY, 3, launch_date)", "DATE_ADD(launch_date, INTERVAL 3 DAY)", "launch_date + 3"],
            "question_text_after_options": "AS expire_date FROM products;",
            "question_comment": "其实本题的3个选项都是有效的 SQL语句，DATEADD 是 SQL Server 的内置函数，DATE_ADD 是 MySQL 的内置函数，都可以用于计算几天后的日期。在 Oracle 数据库中，若要对日期进行加减操作，可直接使用算术运算符。",
            "knowledge_comment": "如果 launch_date 是字符串类型，还需要使用 TO_DATE 函数将日期字符串转换为日期类型。举例：SELECT TO_DATE('2025-04-11', 'YYYY-MM-DD') + 5 FROM DUAL;",
            "correct_answer": "launch_date + 3",
            "applicable_databases": ["Oracle"]
        },
        {
            "question_id": 2,
            "question_text_before_options": "SELECT * FROM users ",
            "options": ["FILTER", "HAVING", "WHERE", "CONDITION"],
            "question_text_after_options": " age > 25;",
            "question_comment": "本题可使用排除法。在 MySQL 语法里，并没有 FILTER 和 CONDITION 这样的关键字来实现筛选数据的功能；HAVING 子句通常与 GROUP BY 子句一起使用，用于对分组后的结果进行筛选，虽然 MySQL 语法上允许只写 HAVING 子句，但语义上不太符合常规用法，可能会产生不符合预期的结果。",
            "knowledge_comment": "WHERE 是基础筛选条件的关键词。",
            "correct_answer": "WHERE",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 2,
            "question_text_before_options": "SELECT * FROM users ",
            "options": ["FILTER", "HAVING", "WHERE", "CONDITION"],
            "question_text_after_options": " age > 25;",
            "question_comment": "本题可使用排除法。SQL Server 从 2012 版本开始支持 FILTER 修饰符，FILTER是聚合函数的修饰符，能在聚合时限制参与运算的值，相比WHERE子句更灵活，可在一个聚合查询中使用多个；在标准 SQL 语法里，并没有 CONDITION 这样的关键字来实现筛选数据的功能；HAVING 子句通常与 GROUP BY 子句一起使用，用于对分组后的结果进行筛选，没有 GROUP BY 子句时使用 HAVING 会引发语法错误。",
            "knowledge_comment": "WHERE 是基础筛选条件的关键词。",
            "correct_answer": "WHERE",
            "applicable_databases": ["SQL Server"]
        },
        {
            "question_id": 2,
            "question_text_before_options": "SELECT * FROM users ",
            "options": ["FILTER", "HAVING", "WHERE", "CONDITION"],
            "question_text_after_options": " age > 25;",
            "question_comment": "本题可使用排除法。在 Oracle 语法里，并没有 FILTER 和 CONDITION 这样的关键字来实现筛选数据的功能；HAVING 子句通常与 GROUP BY 子句一起使用，用于对分组后的结果进行筛选，没有 GROUP BY 子句时使用 HAVING 会引发语法错误。",
            "knowledge_comment": "WHERE 是基础筛选条件的关键词。",
            "correct_answer": "WHERE",
            "applicable_databases": ["Oracle"]
        },
        {
            "question_id": 3,
            "question_text_before_options": "SELECT * FROM users WHERE user_name",
            "options": ["IS NULL", "= NULL" ,"== NULL", "NOT EXISTS"],
            "question_text_after_options": ";",
            "question_comment": "NULL 代表缺失值，不能用 = 来判断一个值是否为 NULL，必须使用 IS NULL 或者 IS NOT NULL。== 是其他程序语言常用的判断符号，注意区分。NOT EXISTS 是一个用于子查询的谓词，它需要搭配子查询使用，用于判断子查询是否返回任何行。在 SELECT * FROM table WHERE user_name not exists 中，user_name 是一个列名，并非子查询，所以会导致语法错误。",
            "knowledge_comment": "SQL 中判断空值必须用 IS NULL",
            "correct_answer": "IS NULL",
            "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
        },
        {
            "question_id": 4,
            "question_text_before_options": "SELECT name, CASE WHEN score >= 90 THEN 'A' WHEN score >= 80 THEN 'B' ",
            "options": ["DEFAULT", "OTHER", "ELSE"],
            "question_text_after_options": " 'C' END AS grade FROM students;",
            "question_comment": "本题可使用排除法。DEFAULT 一般在定义表结构时，用来设定列的默认值，并非用于 CASE 表达式；在标准 SQL 语法里，并没有 OTHER 这样的关键字；因此只能选择 ELSE",
            "knowledge_comment": "在标准 SQL 的 CASE 表达式里，当使用 CASE WHEN ... THEN ... 这种形式时，最后若要指定默认值，使用的关键字是 ELSE ，而非 DEFAULT 。",
            "correct_answer": "ELSE",
            "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
        },
        {
            "question_id": 5,
            "question_text_before_options": "SELECT * FROM orders WHERE status ",
            "options": ["NOT IN", "NOT LIKE" ,"!=", "BETWEEN"],
            "question_text_after_options": " ('cancelled', 'refund');",
            "question_comment": "本题解题线索是 ('cancelled', 'refund')，括号中包含2个字符串说明这是一个列表，而可以放在列表前的操作符非 IN 莫属，答案一目了然。LIKE 后接正则表达式；!= 是其他程序语言常用的判断符号；BETWEEN 应和 AND 配合用于判断范围。",
            "knowledge_comment": "NOT IN 用于排除列表中的值。",
            "correct_answer": "NOT IN",
            "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
        },
        {
            "question_id": 6,
            "question_text_before_options": "查询名字以“张”开头且名字有3个字的用户：SELECT * FROM users WHERE name LIKE ",
            "options": ["'张_'", "'张%'" ,"'张__'","'张*'"],
            "question_text_after_options": ";",
            "question_comment": "_ 是 LIKE 操作符中的通配符，代表单个任意字符。'张_' 表示以 “张” 开头，后面跟着1个任意字符的字符串；% 是通配符，代表零个或多个任意字符。'张%' 表示以 “张” 开头的任意字符串；在常见的主流关系型数据库（如 MySQL、SQL Server、Oracle、PostgreSQL 等）中，SELECT * FROM websites WHERE Name LIKE '张*' 均不适用，因为这些数据库在使用 LIKE 进行模糊匹配时，标准的通配符是 %（代表零个或多个任意字符）和 _（代表单个任意字符），而非 *。",
            "knowledge_comment": "_ 是 LIKE 操作符中的通配符，代表单个任意字符。'张__' 表示以 “张” 开头，后面跟着两个任意字符的字符串。",
            "correct_answer": "'张__'",
            "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
        },
        {
            "question_id": 7,
            "question_text_before_options": "SELECT name, IF(stock > 0, ",
            "options": ["'有货'", "有货" ,"TRUE"],
            "question_text_after_options": ", '缺货') AS status FROM products;",
            "question_comment": "本题主要考察IF函数的使用。IF() 是一个条件判断函数，其语法为 IF(condition, value_if_true, value_if_false)。如果 condition 为真，则返回 value_if_true；否则返回 value_if_false。",
            "knowledge_comment": "IF 函数的第二个参数为条件为真时的返回值，需用引号包裹字符串。CASE WHEN 的条件判断语句在需要判断的情况较多时使用，简单的 Y/N 判断用IF即可。IF作为常用函数，使用方法应该牢记。对于简单的条件判断，一般来说，MySQL 用 IF，SQL Server 用 IIF，Oracle 用 CASE WHEN。",
            "correct_answer": "'有货'",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 7,
            "question_text_before_options": "SELECT name, ",
            "options": ["IF" ,"IFELSE", "IIF"],
            "question_text_after_options": "(stock > 0, '有货', '缺货') AS status FROM products;",
            "question_comment": "本题主要考察条件判断函数的使用。IF() 是 MySQL 中的一个条件判断函数，其语法为 IF(condition, value_if_true, value_if_false)，不适用于 SQL Server，因此排除；IFELSE 并不是一个可用的函数名，因此排除。",
            "knowledge_comment": "IIF 函数是 SQL Server 2012 及更高版本引入的，它是 IF...ELSE 逻辑的简洁表达方式，语法为 IIF(condition, true_value, false_value)。在 SQL Server 2012 及以上版本中，你可以使用 IIF 函数来替代 CASE 表达式实现条件判断，使代码更加简洁直观。对于简单的条件判断，一般来说，SQL Server 用 IIF，MySQL 用 IF，Oracle 用 CASE WHEN。",
            "correct_answer": "IIF",
            "applicable_databases": ["SQL Server"]
        },
        {
            "question_id": 8,
            "question_text_before_options": "查询3天前的订单：SELECT * FROM orders WHERE order_date >= ",
            "options": ["CURRENT_DATE - 3", "DATE_SUB(NOW(), INTERVAL 3 DAY)" ,"GETDATE() - 3","SYSDATE - 3"],
            "question_text_after_options": ";",
            "question_comment": "本题可使用排除法。CURRENT_DATE 的写法不对，CURRENT_DATE是函数名，后应加()，因此可以排除；GETDATE 是 SQL Server 中的函数，也可以排除。SYSDATE 的写法不对，SYSDATE 是函数名，后应加()，因此也可以排除。关于SYSDATE函数的更多介绍请参考：https://dev.mysql.com/doc/refman/9.3/en/date-and-time-functions.html#function_sysdate",
            "knowledge_comment": "MySQL 使用 DATE_SUB 和 INTERVAL 处理日期的减法计算。",
            "correct_answer": "DATE_SUB(NOW(), INTERVAL 3 DAY)",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 9,
            "question_text_before_options": "查询前5条记录：SELECT * FROM employees ",
            "options": ["LIMIT 5" ,"TOP 5", "WHERE ROW_NUMBER() <= 5", "WHERE ROWNUM <= 5"],
            "question_text_after_options": ";",
            "question_comment": "LIMIT 5 是 MySQL 的写法；TOP 5 是 SQL Server 的写法，但位置不再尾端；ROW_NUMBER() 是一个窗口函数，它需要结合 OVER 子句来指定排序规则，并不能直接在 WHERE 子句中使用。",
            "knowledge_comment": "在 Oracle 中，ROWNUM是一个伪列，用于表示结果集的行号。除了题目中的 WHERE ROWNUM <= 5 写法，从 Oracle 12c 开始，还可以这样写：SELECT * FROM employees ORDER BY employee_id OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; 需要注意的是，ORDER BY 是必需的。",
            "correct_answer": "WHERE ROWNUM <= 5",
            "applicable_databases": ["Oracle"]
        },
        {
            "question_id": 9,
            "question_text_before_options": "查询前5条记录：SELECT * FROM employees ",
            "options": ["LIMIT 5" ,"TOP 5", "WHERE ROW_NUMBER() <= 5", "WHERE ROWNUM <= 5"],
            "question_text_after_options": ";",
            "question_comment": "TOP 5 是 SQL Server 的写法，但并不位于尾端；ROW_NUMBER() 是一个窗口函数，它需要结合 OVER 子句来指定排序规则，并不能直接在 WHERE 子句中使用；MySQL 不支持 ROWNUM 关键词。",
            "knowledge_comment": "在 MySQL 里，LIMIT 是一个常用的子句，用于限制查询结果返回的行数。",
            "correct_answer": "LIMIT 5",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 9,
            "question_text_before_options": "查询前5条记录：SELECT",
            "options": ["LIMIT" ,"TOP"],
            "question_text_after_options": " 5 * FROM employees;",
            "question_comment": "LIMIT 5 是 MySQL 的写法，用于限制查询结果返回的行数，位于查询语句的尾端。",
            "knowledge_comment": "TOP 5 是 SQL Server 的写法，用于限制查询结果返回的行数。除了题目中的写法：SELECT TOP 5 * FROM employees;，从 SQL Server 2012 版本开始，还可以这样写：SELECT * FROM employees ORDER BY employee_id OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; 需要注意的是，ORDER BY 是必需的。",
            "correct_answer": "TOP",
            "applicable_databases": ["SQL Server"]
        },
        {
            "question_id": 10,
            "question_text_before_options": "将 NULL 替换为“未知”：SELECT name, ",
            "options": ["ISNULL" ,"NVL" ,"IFNULL" ,"COALESCE"],
            "question_text_after_options": "(city, '未知') AS city FROM customers;",
            "question_comment": "本题可使用排除法。ISNULL 是 SQL Server 函数名，用来判断 NULL 值；NVL 是 Oracle 函数名，用来判断 NULL 值；COALESCE 函数的作用是返回参数列表中第一个非 NULL 的值。它接受多个参数，会按照从左到右的顺序依次检查这些参数，一旦遇到非 NULL 的值，就返回该值，若所有参数都是 NULL，则返回 NULL。使用 COALESCE 函数并不能完成本题的要求。",
            "knowledge_comment": "IFNULL 可用来判断 NULL 值，其语法为 IFNULL(column, value_if_null)。如果 column 值为 NULL，则返回 value_if_null。",
            "correct_answer": "IFNULL",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 10,
            "question_text_before_options": "将 NULL 替换为“未知”：SELECT name, ",
            "options": ["ISNULL" ,"NVL" ,"IFNULL" ,"COALESCE"],
            "question_text_after_options": "(city, '未知') AS city FROM customers;",
            "question_comment": "本题可使用排除法。NVL 是 Oracle 函数名，用来判断 NULL 值；IFNULL 是 MSQL 函数名，用来判断 NULL 值；COALESCE 函数的作用是返回参数列表中第一个非 NULL 的值。它接受多个参数，会按照从左到右的顺序依次检查这些参数，一旦遇到非 NULL 的值，就返回该值，若所有参数都是 NULL，则返回 NULL。使用 COALESCE 函数并不能完成本题的要求。",
            "knowledge_comment": "ISNULL 可用来判断 NULL 值，其语法为 ISNULL(column, value_if_null)。如果 column 值为 NULL，则返回 value_if_null。",
            "correct_answer": "ISNULL",
            "applicable_databases": ["SQL Server"]
        },
        {
            "question_id": 10,
            "question_text_before_options": "将 NULL 替换为“未知”：SELECT name, ",
            "options": ["ISNULL" ,"NVL" ,"IFNULL" ,"COALESCE"],
            "question_text_after_options": "(city, '未知') AS city FROM customers;",
            "question_comment": "本题可使用排除法。ISNULL 是 SQL Server 函数名，用来判断 NULL 值；IFNULL 是 MSQL 函数名，用来判断 NULL 值；COALESCE 函数的作用是返回参数列表中第一个非 NULL 的值。它接受多个参数，会按照从左到右的顺序依次检查这些参数，一旦遇到非 NULL 的值，就返回该值，若所有参数都是 NULL，则返回 NULL。使用 COALESCE 函数并不能完成本题的要求。",
            "knowledge_comment": "NVL 可用来判断 NULL 值，其语法为 NVL(column, value_if_null)。如果 column 值为 NULL，则返回 value_if_null。",
            "correct_answer": "NVL",
            "applicable_databases": ["Oracle"]
        },
        {
            "question_id": 11,
            "question_text_before_options": "格式化日期为“YYYY-MM-DD”格式：SELECT DATE_FORMAT(order_date, '",
            "options": ["%Y-%m-%d" ,"yyyy-MM-dd" ,"YYYY-MM-DD" ,"YY-MM-DD"],
            "question_text_after_options": "') AS formatted_date FROM orders;",
            "question_comment": "DATE_FORMAT 函数用于将日期或日期时间值按照指定的格式进行格式化输出。其语法为 DATE_FORMAT(date, format)，其中 date 是要格式化的日期或日期时间值，format 是指定的输出格式。",
            "knowledge_comment": "%Y 代表四位年份，%m 代表两位月份，%d 代表两位日期。MySQL 还提供了很多其他格式说明符，如 %H 表示 24 小时制的小时，%i 表示分钟，%s 表示秒。感兴趣的话，可以多去官网了解。",
            "correct_answer": "%Y-%m-%d",
            "applicable_databases": ["MySQL"]
        },
        {
            "question_id": 11,
            "question_text_before_options": "格式化日期为“YYYY-MM-DD”格式：SELECT FORMAT(order_date, '",
            "options": ["%Y-%m-%d" ,"yyyy-MM-dd" ,"YYYY-MM-DD" ,"YY-MM-DD"],
            "question_text_after_options": "') AS formatted_date FROM orders;",
            "question_comment": "从 SQL Server 2012 版本开始，引入了 FORMAT 函数来实现日期格式化功能。FORMAT 函数更加通用，不仅可以处理日期类型，还能处理其他数据类型。其语法为 FORMAT(value, format [, culture])，其中 value 是要格式化的值，format 是指定的格式，culture 是可选的文化设置。",
            "knowledge_comment": "这里使用 yyyy 表示四位年份，MM 表示两位月份，dd 表示两位日期。最需要注意的就是大写小。",
            "correct_answer": "yyyy-MM-dd",
            "applicable_databases": ["SQL Server"]
        },
        {
            "question_id": 11,
            "question_text_before_options": "格式化日期为“YYYY-MM-DD”格式：SELECT TO_CHAR(order_date, '",
            "options": ["%Y-%m-%d" ,"yyyy-MM-dd" ,"YYYY-MM-DD" ,"YY-MM-DD"],
            "question_text_after_options": "') AS formatted_date FROM orders;",
            "question_comment": "在 Oracle 中，使用 TO_CHAR 函数来进行日期格式化。TO_CHAR 函数可以将日期、数字等数据类型转换为字符类型，并按照指定的格式输出。其语法为 TO_CHAR(date, format)，其中 date 是要格式化的日期，format 是指定的格式。",
            "knowledge_comment": "这里使用 YYYY 表示四位年份，MM 表示两位月份，DD 表示两位日期。最需要注意的就是大写小。",
            "correct_answer": "YYYY-MM-DD",
            "applicable_databases": ["Oracle"]
        }
    ],
    "4" : [
    {
        "question_id": 1,
        "question_text_before_options": "本年级所有学生按总分降序排名（相同总分排名一致，下一排名不跳过）：SELECT student_id, class_number, total_score, ",
        "options": ["ROW_NUMBER", "DENSE_RANK", "RANK", "NTILE"],
        "question_text_after_options": "() OVER (ORDER BY total_score DESC) AS ranking FROM student_scores;",
        "question_comment": "先分析题目，题目要求按总分排名，可以确定题目考查排序函数，ROW_NUMBER 和 NTILE 被排除。ROW_NUMBER 为结果集中的每一行分配一个唯一的行号，行号按照指定的排序顺序依次递增，且不会出现重复编号，常用于分页查询、筛选前 N 条记录等场景。NTILE 将结果集按照指定的数量分成若干个组，并为每一行分配一个组号，表示该行所在的组，常用于数据分析中的分桶操作，如将客户按消费金额分成不同等级的组，以便进行针对性的营销策略制定。再分析题目具体需求：相同总分排名一致，下一排名不跳过。RANK 也可为结果集中的行分配排名，当存在并列情况时，并列的行具有相同的排名，但后续排名会跳过相应的数字，因此被排除。",
        "knowledge_comment": "DENSE_RANK 为结果集中的行分配排名，当存在并列情况时，并列的行具有相同的排名，且后续排名是连续的，不会跳过任何数字。适用于需要连续排名，且并列情况不影响后续排名顺序的场景，如成绩排名等。",
        "correct_answer": "DENSE_RANK",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },    
    {
        "question_id": 2,
        "question_text_before_options": "SELECT student_id, exam_name, score, DENSE_RANK() OVER (",
        "options": ["GROUP BY", "PARTITION BY", "PART BY", "PARTITION ON"],
        "question_text_after_options": " exam_name ORDER BY score DESC) AS ranking FROM student_scores;",
        "question_comment": "GROUP BY 用于聚合查询的分组，而窗口函数中必须用 PARTITION BY 定义分区。因为都是分组，所以人们容易将两种“分组”概念混淆，要注意区分。PART BY 是一种错写，通常是因为对 PARTITION 单词的不熟悉导致的，单词多写几遍就记住了，要多用哦。PARTITION ON 也是一种错写，在窗口函数中，ORDER BY 用于排序，类似的 PARTITION BY 用来分区，可以一起记忆，都使用BY。",
        "knowledge_comment": "PARTITION BY 是唯一在窗口函数中定义分区的关键词。",
        "correct_answer": "PARTITION BY",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 3,
        "question_text_before_options": "按部门分区，工资降序生成连续行号：SELECT name, department, salary, ROW_NUMBER() OVER (",
        "options": ["ORDER BY salary DESC PARTITION BY department", "PARTITION BY department ORDER BY salary DESC" ,"GROUP BY department ORDER BY salary DESC","PARTITION BY salary ORDER BY department"],
        "question_text_after_options": ") AS page_row FROM employees;",
        "question_comment": "PARTITION BY 子句用于将结果集按照指定的列进行分区。根据题目要求，按 department 列对 employees 表的数据进行分区，因此是 PARTITION BY department；ORDER BY 子句用于指定每个分区内的排序规则。我们按照 salary 列降序排序，即 ORDER BY salary DESC。因为 ORDER BY 用于指定分区的排序规则，所以要先有分区才能排序，因此 ORDER BY 子句需要在 PARTITION BY 子句之后。",
        "knowledge_comment": "PARTITION BY 子句用于将结果集按照指定的列进行分区。ORDER BY 子句用于指定每个分区内的排序规则。ORDER BY 子句顺序在 PARTITION BY 子句之后。",
        "correct_answer": "PARTITION BY department ORDER BY salary DESC",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 4,
        "question_text_before_options": "计算每个员工按入职日期的累计工资总和：SELECT name, hire_date, salary, SUM(salary) OVER (ORDER BY hire_date ",
        "options": ["PARTITION BY department", "DESC" ,"ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW","RANGE BETWEEN 1 PRECEDING AND CURRENT ROW"],
        "question_text_after_options": ") AS total FROM employees;",
        "question_comment": "ORDER BY 子句顺序在 PARTITION BY 子句之后，排除一个错误答案；在计算累计工资总和时，我们通常需要按入职日期从早到晚（升序）排列来正确累加，而 DESC 是降序，会导致累计结果不符合逻辑；RANGE BETWEEN 1 PRECEDING AND CURRENT ROW 计算当前行和与当前行 hire_date 值相邻的前一行（逻辑范围）的累加值，因此无法实现“从最早日期到当前日期”的累计总和，仅计算相邻行的部分值。",
        "knowledge_comment": "ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 这个子句表示从当前行之前的所有行（UNBOUNDED PRECEDING）到当前行（CURRENT ROW），这样就能实现累计求和。这样长的字句需要多使用才能记住。",
        "correct_answer": "ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 5,
        "question_text_before_options": "查询每个产品按销售日期的累计销售金额：SELECT product_id, sale_date, sale_amount, SUM(sale_amount) OVER (PARTITION BY product_id ORDER BY sale_date ",
        "options": ["ROWS", "RANGE" ,"LINES","COLUMNS"],
        "question_text_after_options": " BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total FROM sales;",
        "question_comment": "RANGE 基于排序键的值确定范围，在此场景下不适用；LINES 和 COLUMNS 不是定义窗口范围的正确关键字。",
        "knowledge_comment": "ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 按行的物理顺序，从分区的第一行到当前行进行累加，符合累计计算的需求。",
        "correct_answer": "ROWS",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 6,
        "question_text_before_options": "查询每支股票最近三个交易日收盘价的总和：SELECT stock_id, trading_date, closing_price, SUM(closing_price) OVER (PARTITION BY stock_id ORDER BY trading_date ROWS BETWEEN 2 ",
        "options": ["PRECEDING", "FOLLOWING" ,"CURRENT","UNBOUNDED"],
        "question_text_after_options": " AND CURRENT ROW) AS sum_last_three FROM stock_prices;",
        "question_comment": "ROWS BETWEEN 2 PRECEDING AND CURRENT ROW 表示窗口范围是当前行和它前面的两行，正好是最近三个交易日；FOLLOWING 是往后的行；CURRENT 表述错误，；UNBOUNDED 通常与 PRECEDING 或 FOLLOWING 搭配表示无界的开始或结束，都不符合计算最近三个交易日总和的要求。",
        "knowledge_comment": "ROWS BETWEEN 只能使用以下几种取值来定义窗口范围：UNBOUNDED PRECEDING（表示窗口范围从当前分区的第一行开始）、CURRENT ROW（代表当前行）、n PRECEDING（意味着从当前行往前数 n 行）、n FOLLOWING（表示从当前行往后数 n 行）、UNBOUNDED FOLLOWING（表示窗口范围到当前分区的最后一行结束）。BETWEEN 关键字后的起始位置应该在逻辑上先于 AND 关键字后的结束位置。如果写成不符合逻辑顺序的形式，数据库通常会返回错误，因为它违背了窗口定义的基本逻辑：窗口的起始点应该在结束点之前。",
        "correct_answer": "PRECEDING",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 7,
        "question_text_before_options": "查询每个客户在订单日期前三日内的平均订单金额：SELECT customer_id, order_date, order_amount, AVG(order_amount) OVER (PARTITION BY customer_id ORDER BY order_date ",
        "options": ["ROWS", "RANGE" ,"LINES","COLUMNS"],
        "question_text_after_options": " BETWEEN INTERVAL 3 DAY PRECEDING AND CURRENT ROW) AS avg_three_days FROM orders;",
        "question_comment": "RANGE BETWEEN INTERVAL 3 DAY PRECEDING AND CURRENT ROW 表示窗口范围是当前行日期往前三天到当前行日期，符合计算前三日平均订单金额的逻辑；ROWS BETWEEN 只能使用以下几种取值来定义窗口范围：UNBOUNDED PRECEDING、CURRENT ROW、n PRECEDING、n FOLLOWING、UNBOUNDED FOLLOWING。题目 BETWEEN 后方是 INTERVAL 3 DAY PRECEDING ，所以 ROWS 在此场景下不适用；LINES 和 COLUMNS 不是定义窗口范围的正确关键字。",
        "knowledge_comment": "RANGE BETWEEN 依据排序键的值来确定范围，只要排序键的值满足条件，对应的行就会被包含在窗口内。在 RANGE BETWEEN 子句中，定义窗口范围可以有多种写法：UNBOUNDED PRECEDING（表示从当前分区的第一行开始作为窗口范围的起始位置）、CURRENT ROW（代表当前行，既可以作为起始位置也可以作为结束位置）、n PRECEDING（n 表示一个数值，n PRECEDING 意味着从当前行往前数 n 个与排序键值相关的行作为窗口范围的起始位置）、n FOLLOWIN（n 为一个数值，n FOLLOWING 表示从当前行往后数 n 个与排序键值相关的行作为窗口范围的结束位置）、UNBOUNDED FOLLOWING（表示窗口范围到当前分区的最后一行结束）、使用 INTERVAL 关键字（当排序键是日期或时间类型时，可以使用 INTERVAL 来指定一个时间范围）。",
        "correct_answer": "RANGE",
        "applicable_databases": ["MySQL", "Oracle"]
    },
    {
        "question_id": 8,
        "question_text_before_options": "查询每个员工工资与上一名员工的差值：SELECT name, salary, salary - ",
        "options": ["LAG(salary, 1)", "LEAD(salary, 1)" ,"FIRST_VALUE(salary)","LAST_VALUE(salary)"],
        "question_text_after_options": " OVER (ORDER BY salary DESC) AS diff FROM employees;",
        "question_comment": "LEAD 是一个窗口函数，与 LAG 相反，它用于在结果集中从当前行向后偏移指定的行数，并获取该行指定列的值。LEAD(salary, 1) 表示从当前行向后偏移 1 行，获取那一行的 salary 值。FIRST_VALUE 是一个窗口函数，用于返回窗口内第一行指定列的值。无论当前行是哪一行，它总是返回窗口内第一行的 salary 值。LAST_VALUE 是一个窗口函数，用于返回窗口内最后一行指定列的值。默认情况下，窗口范围是从第一行到当前行，所以它返回的是当前窗口内最后一行（通常就是当前行）的 salary 值。因此都不符合题目要求的每个员工工资与上一名员工的差值。",
        "knowledge_comment": "LAG 是一个窗口函数，用于在结果集中从当前行向前偏移指定的行数，并获取该行指定列的值。LAG(salary, 1) 表示从当前行向前偏移 1 行，获取那一行的 salary 值。",
        "correct_answer": "LAG(salary, 1)",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]

    },
    {
        "question_id": 9,
        "question_text_before_options": "计算每个部门内员工的工资百分比排名：SELECT name, department, salary, ",
        "options": ["RANK", "PERCENT_RANK" ,"CUME_DIST","DENSE_RANK"],
        "question_text_after_options": "() OVER (PARTITION BY department ORDER BY salary DESC) AS percent_rank FROM employees;",
        "question_comment": "RANK 函数为结果集中的每一行分配一个排名。当存在并列值时，并列的行将被赋予相同的排名，并且下一个排名会跳过相应的数量。它返回的是具体的排名数字，而非百分比排名，不符合本题要求。CUME_DIST 函数计算当前行的累积分布值，即小于或等于当前行值的行数占分区内总行数的比例。虽然也是计算相对位置，但计算方式与 PERCENT_RANK 不同，它得到的是累积分布比例，并非百分比排名，不符合本题要求。DENSE_RANK 函数与 RANK 类似，为结果集中的每一行分配一个排名。但当存在并列值时，并列的行被赋予相同的排名，下一个排名是连续的，不会跳过。同样的，它返回的是具体的排名数字，不是百分比排名，不符合本题要求。",
        "knowledge_comment": "PERCENT_RANK 函数计算当前行的百分比排名。其计算公式为 (当前行的排名 - 1) / (分区内总行数 - 1)，结果是一个介于 0 到 1 之间的小数，表示当前行在分区内的相对位置。",
        "correct_answer": "PERCENT_RANK",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    },
    {
        "question_id": 10,
        "question_text_before_options": "将每个部门的员工按工资分为4个等级：SELECT name, department, salary, NTILE(4) OVER (PARTITION BY department ORDER BY salary DESC) AS bucket FROM employees; 如果部门有7名员工，每个桶（组）的人数分布：",
        "options": ["2,2,2,1", "1,2,2,2" ,"3,2,2,0","4,3,0,0"],
        "question_text_after_options": "。",
        "question_comment": "NTILE(4) 函数会将每个 department 分区内按照 salary 降序排列后的员工数据平均分成 4 个桶（组），并为每一行分配一个桶编号（1 - 4）存储在 bucket 列中。要将 7 行数据划分为 4 个桶，计算每个桶平均分配的行数为 7 ÷ 4 = 1（向下取整），余数为 7 % 4 = 3。这意味着会先给前 3 个桶各多分配 1 行，分配情况：前 3 个桶：每个桶有 1 + 1 = 2 行。第 4 个桶：有 1 行。",
        "knowledge_comment": "NTILE 函数的作用是将有序的数据集合划分为指定数量的桶（组），并为每一行分配一个桶编号。当员工数量不能被指定的桶数整除时，NTILE 会尽量平均分配，前面的桶会比后面的桶多分配一些行。",
        "correct_answer": "2,2,2,1",
        "applicable_databases": ["MySQL", "SQL Server", "Oracle"]
    }
    ]
}